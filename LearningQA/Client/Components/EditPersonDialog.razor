@using LearningQA.Shared.DTO
@inject IPersonInfoPersist PersonInfoPersist
@inject IPersonInfoModel PersonInfoModel
<a @onclick="OnShow" class="ml-md-auto bg-color-7 color-2">Persons</a>
@if (Show && PersonInfoPersist.Persons != null &&  PersonInfoPersist.SelectedPerson != null )
{
	 
	<div class="modal" style="display:block;">
	 <div class="modal-dialog">
	  <div class="modal-content">
	   <div class="modal-header">
		<h4 class="modal-title color-3">Person Editor</h4>
		<button type="button" class="close color-4" @onclick="@ModalClose">&times;</button>
	   </div>
	   
	   
	   <div class="modal-body color-6">
		<EditForm Model="Person" OnValidSubmit="ModalOk" OnInvalidSubmit="HandleInvakidSubmit" >
		 <DataAnnotationsValidator />
		 <ValidationSummary/>
		<div style="display:flex;flex-direction:row;align-items:center">
		<button type="button" class="btn  btn-outline-light color-4" @onclick="ModalAdd">Add</button>
	<UserSelect OnSelectionChange="OnSelectionChanged" SelectedPerson="PersonInfoPersist.SelectedPerson" Persons="PersonInfoPersist.Persons"  />
</div> 
<hr />
		<p><label>IdNumber: </label></p>
		 <p><InputText @bind-Value=Person.IdNumber style="width:100%" /></p>
		 <p><label>Name: </label></p>
		 <p> <InputText @bind-Value="Person.Name" style="width:100%" /></p>
		 <p><label>Phone: </label></p><p> <InputText @bind-Value="Person.Phone" style="width:100%" /></p>
		 <p><label>Address: </label></p><p><InputText @bind-Value="Person.Address" style="width:100%" /></p>
		 <p><label>Email: </label></p><p><InputText @bind-Value="Person.Email" style="width:100%" /></p>
		 <p><label>Password: </label></p><p><InputText @bind-Value="Person.Password" style="width:100%" /></p>
		 <p><lable>Preferance: </lable></p>
		 <ul>
			<li><p><lable>Theme: </lable></p><p><InputNumber @bind-Value="PersonInfoPersist.SelectedPerson.Preferance.Theme" style="width:100%"/></p></li>
			<li><p><lable>HUE: </lable></p><p>HUE<InputNumber @bind-Value="PersonInfoPersist.SelectedPerson.Preferance.HUE" style="width:100%"/></p></li>
		</ul>
		 <div class="modal-footer">
		
		<button type="submit" class="btn btn-outline-light color-4" >Save</button>
		<button type="button" class="btn btn-outline-light color-4" @onclick="@ModalClose">Cancel</button>
	   </div>
		</EditForm>

	   </div>

	  </div>
	 </div>
	</div>
}


@code {
	[Parameter] public PersonInfoDto Person { get; set; }
	[Parameter] public EventCallback<bool> OnClose { get; set; }
	[Parameter] public bool Show { get; set; } = false;
	protected override async Task OnInitializedAsync()
	{
		if (PersonInfoPersist.Persons is null)
		{
			await PersonInfoModel.InitializeAsync();
			Person = PersonInfoPersist.SelectedPerson;
			Person.IsChanged = true;
		}
		await base.OnInitializedAsync();
		return;
	}
	private async Task HandleValidSubmit()
	{

	}
	private async Task HandleInvakidSubmit()
	{ }
	private async Task OnSelectionChanged(int selection)
	{
		Person = PersonInfoPersist.Persons.Where(x => x.Id == selection).FirstOrDefault();
		Person.IsChanged = true;
		StateHasChanged();
	}
	private void OnShow()
	{
		Show = !Show;
	}
	private void ModalAdd()
	{
		Person = new PersonInfoDto();
		Person.IsChanged = true;
		PersonInfoModel.AddPersonInfoAsync(Person);
	}
	private void ModalClose()
	{
		Show = false;

	}
	private async Task  ModalOk()
	{
		Show = false;
		await PersonInfoModel.SaveAsync();

	}
}
